import React, { useRef, useState } from 'react';
import { StyleSheet, View, TouchableOpacity, Image } from 'react-native';
import { Block, Button, Text } from 'galio-framework';
import Webcam from 'react-webcam';
import { useTranslation } from 'react-i18next';
import { Ionicons, MaterialIcons } from '@expo/vector-icons'; // Added MaterialIcons for back button
import { useNavigation } from '@react-navigation/native';
import { Images, argonTheme } from '../constants';

const LiveTrans = () => {
  const webcamRef = useRef(null);
  const [isCameraOn, setIsCameraOn] = useState(true);
  const { t } = useTranslation();
  const navigation = useNavigation();

  const videoConstraints = {
    width: 1280,
    height: 720,
    facingMode: "user"
  };

  return (
    <Block flex style={styles.container}>
      {/* Back Button (Top Left) */}
      <TouchableOpacity 
        style={styles.backButton}
        onPress={() => navigation.navigate('SignBridgeMain')}
      >
        <MaterialIcons name="arrow-back" size={24} color={argonTheme.COLORS.PRIMARY} />
        <Text style={styles.backText}>{t('backToHome')}</Text>
      </TouchableOpacity>

      {/* Language Switcher Button (Top Right) */}
      <TouchableOpacity 
        style={styles.languageButton}
        onPress={() => navigation.navigate('LanguageSelect')}
      >
        <Ionicons name="language" size={24} color={argonTheme.COLORS.PRIMARY} />
        <Text style={styles.languageText}>{t('currentLanguage')}</Text>
      </TouchableOpacity>

      {/* Camera View */}
      {isCameraOn ? (
        <View style={styles.webcamContainer}>
        <Webcam
            ref={webcamRef}
            audio={false}
            screenshotFormat="image/jpeg"
            videoConstraints={videoConstraints}
            style={styles.webcam}
          />
        </View>
      ) : (
        <Image source={Images.placeholder} style={styles.placeholder} />
      )}

      {/* Controls */}
      <Block style={styles.controls}>
        <Button 
          color={argonTheme.COLORS.ORANGE}
          onPress={() => setIsCameraOn(!isCameraOn)}
          style={styles.controlButton}
        >
          <Text>{isCameraOn ? t('turnOffCamera') : t('turnOnCamera')}</Text>
        </Button>
        
        <Button 
          color={argonTheme.COLORS.PRIMARY}
          onPress={() => navigation.navigate('SignBridgeMain')}
          style={styles.controlButton}
        >
          <Text>{t('startTranslation')}</Text>
        </Button>
      </Block>
    </Block>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
  },
  webcam: {
    width: '100%',
    height: '100%',
    objectFit: 'cover',
  },
  placeholder: {
    width: '90%',
    maxWidth: 1200,
    aspectRatio: 16/9,
    alignSelf: 'center',
    marginVertical: 20,
    backgroundColor: '#000',
  },
  controls: {
    position: 'absolute',
    bottom: 40,
    flexDirection: 'row',
    gap: 20,
  },
  controlButton: {
    paddingHorizontal: 20,
  },
  backButton: {
    position: 'absolute',
    top: 40,
    left: 20,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255,255,255,0.8)',
    padding: 10,
    borderRadius: 20,
    zIndex: 10,
  },
  backText: {
    marginLeft: 5,
    color: argonTheme.COLORS.PRIMARY,
  },
  languageButton: {
    position: 'absolute',
    top: 40,
    right: 20,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255,255,255,0.8)',
    padding: 10,
    borderRadius: 20,
    zIndex: 10,
  },
  languageText: {
    marginLeft: 5,
    color: argonTheme.COLORS.PRIMARY,
  },
  webcamContainer: {
    width: '90%',       // Limits width to 90% of parent
    maxWidth: 1200,      // Absolute maximum width
    aspectRatio: 16/9,  // Maintains 16:9 aspect ratio
    backgroundColor: '#000', // Shows black bars if aspect ratio doesn't match
    overflow: 'hidden', // Ensures video doesn't overflow container
    alignSelf: 'center', // Centers horizontally
    marginVertical: 20,  // Adds some vertical spacing
  }
});

export default LiveTrans;